// <auto-generated />
using System;
using CPCommon.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CPCommon.Migrations
{
    [DbContext(typeof(CPContext))]
    [Migration("20210613184419_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresExtension("postgis")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("CPCommon.Model.Airplane", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("TailNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Airplane");
                });

            modelBuilder.Entity("CPCommon.Model.Airport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Altitude")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Ident")
                        .HasColumnType("text");

                    b.Property<double>("LatY")
                        .HasColumnType("double precision");

                    b.Property<Point>("Location")
                        .HasColumnType("geometry");

                    b.Property<double>("LonX")
                        .HasColumnType("double precision");

                    b.Property<int>("LongestRunwayLength")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("CPCommon.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CrossCountryHours")
                        .HasColumnType("integer");

                    b.Property<int>("InstrumentHours")
                        .HasColumnType("integer");

                    b.Property<int>("JetHours")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PistonHours")
                        .HasColumnType("integer");

                    b.Property<int>("TotalHours")
                        .HasColumnType("integer");

                    b.Property<int>("TurboPropHours")
                        .HasColumnType("integer");

                    b.Property<int>("TwinHours")
                        .HasColumnType("integer");

                    b.Property<int>("UnloggedHours")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CPCommon.Model.UserAirplane", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AirplaneId")
                        .HasColumnType("uuid");

                    b.Property<int>("Hours")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "AirplaneId");

                    b.HasIndex("AirplaneId");

                    b.ToTable("UserAirplane");
                });

            modelBuilder.Entity("CPCommon.Model.UserAirport", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AirportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsHome")
                        .HasColumnType("boolean");

                    b.Property<int>("Notoriety")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "AirportId");

                    b.HasIndex("AirportId");

                    b.ToTable("UserAirports");
                });

            modelBuilder.Entity("CPCommon.Model.UserAirplane", b =>
                {
                    b.HasOne("CPCommon.Model.Airplane", "Airplane")
                        .WithMany()
                        .HasForeignKey("AirplaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CPCommon.Model.User", "User")
                        .WithMany("UserAirplanes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airplane");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CPCommon.Model.UserAirport", b =>
                {
                    b.HasOne("CPCommon.Model.Airport", "Airport")
                        .WithMany()
                        .HasForeignKey("AirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CPCommon.Model.User", "User")
                        .WithMany("UserAirports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airport");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CPCommon.Model.User", b =>
                {
                    b.Navigation("UserAirplanes");

                    b.Navigation("UserAirports");
                });
#pragma warning restore 612, 618
        }
    }
}
